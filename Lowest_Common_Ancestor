///LCA using sparse table

#define mx 100002

int level[mx];
int P[mx][22]; //sparse table

int T[mx]; //Parent table


//calculate parent for every node
void dfs(int from, int u, int dep)
{
    T[u]=from;
    level[u]=dep;

    for(auto i:data[u]){
        int v=data[u][i];
        if(v==from) continue;
        dfs(u,v,dep);
    }
}

//LCA calculate

int lca_quary(int n,int p,int q)
{
    int tmp,log,i;
    if(level[p]<level[q]) swap(p,q);

    log=1;

    while(1)
    {
        int next=log+1;
        if((1<<next)>level[p]) break;
        log++;
    }

    for(i=log;i>=0;i--){
        if(level[p]-(1<<i)>=level[q]) p=P[p][i];
    }

    if(p==q) return p;

    for(i=log;i>=0;i--){
        if(P[p][i]!=-1 && P[p][i]!=P[q][i]) p= P[p][i], q=P[q][i];
    }

    return T[p];
}


/// Initialize sparse table with 2^0th parent for every node.

void lca_init(int n)
{
    memset(P,-1,sizeof P); ///Initialize every node with -1.

    for(int i=0;i<n;i++) P[i][0]=T[i];

    for(int j=1;(1<<j)<n ;j++){
        for(int i=0;i<n;i++){
            if(P[i][j-1]!=-1) P[i][j]=P[P[i][j-1]][j-1];
        }
    }
}
